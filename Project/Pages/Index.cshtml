@page
@model IndexModel
@{
    ViewData["Title"] = "Plan";
}

<style>
    select {
        padding: 4px;
    }

    .login-container {
        display: flex;
        justify-content: flex-end;
        padding: 10px;
    }

    .login-form input[type="text"],
    .login-form input[type="password"] {
        margin-right: 5px;
        padding: 5px;
    }

    .login-form button {
        padding: 5px 10px;
    }

    select {
        padding: 4px;
    }

    .scheduler_default_event_inner {
        border-radius: 20px;
        padding-left: 44px;
    }
</style>

<script src="~/lib/daypilot/daypilot-all.min.js"></script>

<div class="main">
    <div class="login-container">
        <form class="login-form">
            <input type="text" placeholder="Username" required>
            <input type="password" placeholder="Password" required>
            <button type="submit">Login</button>
        </form>
    </div>
    <div class="space">
        Location: <select id="locations"></select>
    </div>
    <div id="dp"></div>
</div>

<script>
    const app = {
        elements: {
            locations: document.querySelector("#locations")
        },
        locationList: [],
        findLocation(id) {
            if (!app.locationList) {
                return null;
            }
            return app.locationList.find((item) => item.id === id);
        },
        async activateLocation(location) {
            let item = location;
            if (typeof location !== "object") {
                item = app.findLocation(location);
            }

            const start = scheduler.visibleStart();
            const end = scheduler.visibleEnd();

            const promiseEmployees = DayPilot.Http.get("/api/Employees");
            const promiseAssignments = DayPilot.Http.get(`/api/Assignments?start=${start}&end=${end}`);

            const [{data:resources}, {data:assignments}] = await Promise.all([promiseEmployees, promiseAssignments]);

            resources.splice(0, 0, { id: "L" + item.id, name: item.name, type: "location" });

            const events = [];
            const links = [];
            assignments.forEach(e => {
                if (e.locationId === item.id) {
                    // location row
                    events.push({
                        ...e,
                        id: "L" + e.id,
                        text: "",
                        resource: "L" + e.locationId,
                        join: e.id,
                        type: "location"
                    });

                    // person row
                    events.push({
                        ...e,
                        text: "",
                        resource: e.employeeId,
                        join: e.id
                    });

                    // link connecting the events
                    links.push({
                        from: "L" + e.id,
                        to: e.id,
                        type: "FinishToFinish",
                        color: "#e69138"
                    });
                } else {

                    // inactive assignment
                    events.push({
                        ...e,
                        text: "",
                        resource: e.employeeId,
                        join: e.id,
                        type: "inactive"
                    });
                }
            });

            scheduler.update({
                resources,
                events,
                links
            });
        },
        async loadLocations() {

            const {data} = await DayPilot.Http.get("/api/Locations");

            app.locationList = data;
            app.elements.locations.innerHTML = '';

            app.locationList.forEach((item) => {
                const option = document.createElement("option");
                option.value = item.id;
                option.innerText = item.name;
                app.elements.locations.appendChild(option);
            });

            app.activateLocation(app.locationList[0]);

        },
        getTimeline() {
            const days = DayPilot.Date.today().daysInMonth();
            const start = DayPilot.Date.today().firstDayOfMonth();

            const result = [];
            for (let i = 0; i < days; i++) {
                const day = start.addDays(i);
                result.push({
                    start: day.addHours(0),
                    end: day.addHours(8)
                });
                result.push({
                    start: day.addHours(8),
                    end: day.addHours(16)
                });
                result.push({
                    start: day.addHours(16),
                    end: day.addHours(24)
                });
            }
            return result;
        },
        initials(str) {
            if (typeof str !== "string") {
                return "";
            }
            return str.split(" ").slice(0, 2).map(w => w[0] && w[0].toUpperCase())
                .join("");
        },
        init() {
            window.addEventListener("DOMContentLoaded", () => {
                app.elements.locations.addEventListener("change", (e) => {
                    const locationId = parseInt(e.target.value);
                    app.activateLocation(locationId);
                });
                app.loadLocations();
            });
        }
    };

    app.init();

    const scheduler = new DayPilot.Scheduler("dp",
        {
            timeHeaders: [{ groupBy: "Month" }, { groupBy: "Day", format: "dddd M/d/yyyy" }, { groupBy: "Cell" }],
            startDate: "2022-07-01",
            days: 31,
            onBeforeTimeHeaderRender: (args) => {
                if (args.header.level === 2) {
                    args.header.text = args.header.start.toString("h") + args.header.start.toString("tt").substring(0, 1).toLowerCase();
                }
            },
            businessBeginsHour: 8,
            businessEndsHour: 16,
            scale: "Manual",
            timeline: app.getTimeline(),
            cellWidth: 140,
            eventHeight: 40,
            linkBottomMargin: 20, 
            headerHeight: 30,
            treeEnabled: true,
            allowEventOverlap: false,
            multiMoveVerticalMode: "Master",
            eventResizeHandling: "Disabled",
            rowHeaderColumns: [
                { name: "Name", display: "name" },
                { name: "Total" }
            ],
            onTimeRangeSelected: async (args) => {
                const row = scheduler.rows.find(args.resource);
                if (row.index === 0) {
                    await DayPilot.Modal.alert("No assignment for this shift.<br><br>Click below to create a new assignment.");
                    scheduler.clearSelection();
                    return;
                }

                const modal = await DayPilot.Modal.confirm("Create a new assignment?");
                scheduler.clearSelection();
                if (!modal.result) {
                    return;
                }

                const locationId = parseInt(app.elements.locations.value);


                const params = {
                    start: args.start,
                    end: args.end,
                    locationId: locationId,
                    employeeId: args.resource
                };
                const { data } = await DayPilot.Http.post("/api/Assignments", params);

                const id = data.id;

                scheduler.events.add({
                    start: args.start,
                    end: args.end,
                    id: id,
                    resource: args.resource,
                    locationId: locationId,
                    employeeId: args.resource,
                    join: id
                });

                scheduler.events.add({
                    start: args.start,
                    end: args.end,
                    id: "L" + id,
                    resource: "L" + locationId,
                    locationId: locationId,
                    employeeId: args.resource,
                    type: "location",
                    join: id
                });
                scheduler.links.add({
                    from: "L" + id,
                    to: id,
                    type: "FinishToFinish",
                    color: "#e69138"
                });
            },
            onBeforeCellRender: (args) => {
                if (args.cell.y === 0) {
                    args.cell.backColor = "#fff2cc";
                }
            },
            onBeforeRowHeaderRender: (args) => {
                const duration = args.row.events.totalDuration();
                const columnTotal = args.row.columns[1];
                if (duration.totalHours() > 0 && columnTotal) {
                    columnTotal.text = duration.totalHours() + "h";
                }
                if (args.row.data.type === "location") {
                    args.row.backColor = "#ffe599";
                    args.row.fontColor = "#000";
                    if (columnTotal) {
                        columnTotal.fontColor = "#000";
                    }
                }
            },
            onEventMove: async (args) => {
                const e = args.e;
                if (e.data.type === "location") {
                    const params = {
                        start: args.newStart,
                        end: args.newEnd
                    };
                    await DayPilot.Http.put("/api/Assignments/" + e.data.join, params);
                } else {
                    const params = {
                        id: e.data.join,
                        employeeId: args.newResource
                    };
                    await DayPilot.Http.put("/api/Assignments/" + e.data.join, params);
                    const locationAssignment = scheduler.events.find("L" + e.data.join);
                    locationAssignment.data.employeeId = args.newResource;
                    scheduler.events.update(locationAssignment);
                }

            },
            onTimeRangeSelecting: (args) => {
                if (args.duration.totalHours() > 8) {
                    args.allowed = false;
                    args.right.enabled = true;
                    args.right.text = "Max duration is 8 hours";
                }
            },
            onBeforeEventRender: (args) => {
                const isLocation = args.data.type === "location";
                const inactive = args.data.type === "inactive";

                args.data.barHidden = true;
                args.data.fontColor = "#ffffff";
                args.data.borderColor = "darker";

                if (isLocation) {
                    const person = scheduler.rows.find(args.data.employeeId);

                    args.data.backColor = "#3d85c6";
                    args.data.text = person.name;
                    args.data.moveVDisabled = true;

                    args.data.areas = [
                        {
                            right: 2,
                            top: 10,
                            height: 20,
                            width: 20,
                            cssClass: "scheduler_default_event_delete",
                            style: "background-color: #fff; border: 1px solid #ccc; box-sizing: border-box; border-radius: 10px; padding: 0px;",
                            visibility: "Visible",
                            onClick: async (args) => {
                                const modal = await DayPilot.Modal.confirm("Delete this assignments?");
                                if (modal.canceled) {
                                    return;
                                }
                                const locationAssignment = args.source;
                                const assignmentId = parseInt(locationAssignment.data.join);
                                const employeeAssignment = scheduler.events.find(assignmentId);
                                await DayPilot.Http.delete("/api/Assignments/" + assignmentId);
                                scheduler.events.remove(locationAssignment);
                                scheduler.events.remove(employeeAssignment);
                            }
                        }
                    ];
                } else {
                    const location = app.findLocation(args.data.locationId);
                    if (location) {
                        args.data.text = location.name;
                        args.data.moveHDisabled = true;
                    }
                    if (inactive) {
                        args.data.backColor = "#888888";
                        args.data.moveDisabled = true;
                        args.data.resizeDisabled = true;
                    } else {
                        args.data.backColor = "#6fa7d4";
                    }
                }


                if (!args.data.areas) {
                    args.data.areas = [];
                }

                // dot
                const short = isLocation ? "" : app.initials(args.data.text);
                args.data.areas.push({
                    left: 0,
                    top: 0,
                    width: 40,
                    height: 40,
                    style: "border-radius: 36px; font-size: 20px; display: flex; align-items: center; justify-content: center;",
                    backColor: DayPilot.ColorUtil.darker(args.data.backColor, 1),
                    fontColor: "#ffffff",
                    text: short
                });

            }
        });
    scheduler.init();


</script>


<style>
    .scheduler_default_event_inner {
        border-radius: 20px;
        padding-left: 44px;
    }
</style>